(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it1 () Int)
(declare-fun i2 () Int)
(declare-fun it2 () Int)
(declare-fun i3 () Int)
(declare-fun it3 () Int)
(declare-fun it4 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun it5 () Int)
(declare-fun i6 () Int)
(declare-fun it6 () Int)
(declare-fun it92 () Int)
(declare-fun it13 () Int)
(declare-fun it117 () Int)
(declare-fun it120 () Int)
(declare-fun it121 () Int)
(declare-fun it122 () Int)
(declare-fun it123 () Int)
(declare-fun it124 () Int)
(declare-fun it125 () Int)
(declare-fun it128 () Int)
(declare-fun it253 () Int)
(declare-fun it254 () Int)
(declare-fun it255 () Int)
(declare-fun it256 () Int)
(declare-fun it257 () Int)
(declare-fun it258 () Int)
(declare-fun it383 () Int)
(declare-fun it384 () Int)
(declare-fun it385 () Int)
(declare-fun it386 () Int)
(declare-fun it387 () Int)
(declare-fun it388 () Int)
(declare-fun it413 () Int)
(declare-fun it414 () Int)
(declare-fun it415 () Int)
(declare-fun it416 () Int)
(declare-fun it417 () Int)
(declare-fun it418 () Int)

(assert (let ((a!1 (+ (* (+ it117 (- 1)) it13 (- 2))
              it3
              (* it13 (- 2))
              (* (+ it117 (- 1)) it92 (- 2))))
      (a!3 (> (+ (+ it3 (* it13 (- 2))) (* it92 (- 2)) 1) 0))
      (a!5 (> (+ (+ it3 (* it13 (- 2))) 1) 0)))
(let (
      (a!4 (> (+ (+ (* it92 (- 2))) 1) 0)))
  (and (>= (+ (* it1 (- 1)) 2) 0)

       (>= (+ it117 (- 1)) 0)
       (> (+ a!1 2) 0)
       a!5
       (>= (+ it92 (- 1)) 0)))))
(assert (= (+ it418 (* it388 (- 1))) 0))
(assert (and (= 1 0)
     (>= (+ (* it413 (- 1)) 3) 0)
     (> (+ it416 it417) 0)
     (>= (+ it413 (- 3)) 0)))
(check-sat)
