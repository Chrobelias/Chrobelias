type config =
  { mutable outdir : string
  ; mutable path : string
  ; mutable timeout : int
  ; mutable dot_dot_count : int
    (** This is needed to insert right number of ../ to access benchmarks.
        Probably it could be calculated from two paths, but it is postponed for later. *)
  }

let config = { outdir = "."; path = "."; timeout = 2; dot_dot_count = 5 }

let () =
  Arg.parse
    [ "-o", Arg.String (fun s -> config.outdir <- s), ""
    ; "-ddc", Arg.Int (fun s -> config.dot_dot_count <- s), ""
    ; ( "-t"
      , Arg.Int
          (fun n ->
            assert (n >= 0);
            config.timeout <- n)
      , "" )
    ]
    (fun s -> config.path <- s)
    "help"
;;

let is_good_smt2_file filename =
  let strs = In_channel.with_open_text filename In_channel.input_lines in
  let has_bad_expo str =
    Str.string_match (Str.regexp "exp i") str 0
    || Str.string_match (Str.regexp "exp 5") str 0
  in
  try
    let _ =
      List.find
        (fun s ->
           (String.starts_with ~prefix:"(declare-fun " s
            && String.ends_with ~suffix:" Bool)" s)
           || has_bad_expo s)
        strs
    in
    false
  with
  | Not_found -> true
;;

let max_tests_count = 4444

let find_files path =
  let dir = Unix.opendir path in
  let c = ref 0 in
  let rec loop acc =
    try
      let s = Unix.readdir dir in
      let suffix = ".smt2" in
      let newacc =
        if
          String.ends_with ~suffix s
          && is_good_smt2_file (path ^ "/" ^ s)
          && !c < max_tests_count
        then String.sub s 0 (String.length s - String.length suffix) :: acc
        else acc
      in
      loop newacc
    with
    | End_of_file ->
      Unix.closedir dir;
      acc
  in
  loop [] |> List.sort String.compare
;;

(* let files = loop [] |> List.sort String.compare in
  List.iter
    (fun basename ->
       let () = incr c in
       Printf.printf "Processing: %s...\n" basename;
       f basename)
    files *)

let dune_str = "dune build --no-print-directory --profile=benchmark"

let () =
  let mk_joined_makefile ppf files =
    Format.fprintf ppf "\n.PHONY: fast\n";
    Format.fprintf ppf "fast:\n";
    let rec loop = function
      | [] -> ()
      | xs ->
        let prefix = List.take 5 xs in
        Format.fprintf
          ppf
          "\t%s --au @%s || exit 0\n"
          dune_str
          (String.concat " @" prefix);
        loop (List.drop 5 xs)
    in
    loop files;
    Format.fprintf ppf "\n\n"
  in
  let files = find_files config.path in
  Out_channel.with_open_text (config.outdir ^ "/dune") (fun dunech ->
    Out_channel.with_open_text (config.outdir ^ "/Makefile") (fun makech ->
      let dfmt = Format.formatter_of_out_channel dunech in
      let dprintf ppf = Format.kasprintf (Format.fprintf dfmt "%s\n") ppf in
      let mfmt = Format.formatter_of_out_channel makech in
      let mprintf ppf = Format.kasprintf (Format.fprintf mfmt "%s\n") ppf in
      dprintf "; This file was autogenerated by";
      dprintf "; %s\n" (Array.fold_left ( ^ ) "" Sys.argv);
      dprintf "(cram";
      dprintf " (deps %%{bin:Chro}))\n";
      mprintf "# This file was autogenerated";
      mprintf "#AU ?= ";
      mprintf "all:\n";
      let makefile_single file =
        mprintf ".PHONY: %s" file;
        mprintf "all: %s" file;
        mprintf "%s:" file;
        mprintf "\t%s @%s --au || exit 0\n" dune_str file
      in
      let dune_single ~file smt2_file =
        dprintf "(cram";
        dprintf " (applies_to %s)" file;
        dprintf " (enabled_if";
        dprintf "  (= benchmark %%{profile}))";
        dprintf " (deps %s))\n" smt2_file
      in
      let t_file ~file smt2_file =
        let tfilename = file ^ ".t" in
        Out_channel.with_open_text
          (config.outdir ^ "/" ^ tfilename)
          (fun tch ->
             let tfmt = Format.formatter_of_out_channel tch in
             Format.fprintf tfmt "%s\n%!" file;
             Format.fprintf tfmt "  $ export OCAMLRUNPARAM='b=0'\n";
             if config.timeout > 0
             then
               Format.fprintf
                 tfmt
                 "  $ timeout %d Chro %s || echo TIMEOUT\n"
                 config.timeout
                 smt2_file
             else Format.fprintf tfmt "  $ Chro %s\n" smt2_file;
             Format.pp_print_flush tfmt ())
      in
      ListLabels.iter files ~f:(fun file ->
        makefile_single file;
        let smt2_file =
          Printf.sprintf
            "%s/%s/%s.smt2"
            (String.concat "/" (List.init config.dot_dot_count (fun _ -> "..")))
            config.path
            file
        in
        dune_single ~file smt2_file;
        t_file ~file smt2_file);
      mk_joined_makefile mfmt files;
      Format.pp_print_flush mfmt ();
      Format.pp_print_flush dfmt ()))
;;
